// Mocks generated by Mockito 5.4.4 from annotations
// in frontend/test/presentation/presenters/auth/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:frontend/domain/entities/entities.dart' as _i3;
import 'package:frontend/domain/repositories/repositories.dart' as _i2;
import 'package:frontend/domain/usecases/get_token.dart' as _i7;
import 'package:frontend/domain/usecases/login_user.dart' as _i4;
import 'package:frontend/domain/usecases/save_token.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenRepository_2 extends _i1.SmartFake
    implements _i2.TokenRepository {
  _FakeTokenRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUser extends _i1.Mock implements _i4.LoginUser {
  MockLoginUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);

  @override
  _i5.Future<_i3.User> call(
    String? email,
    String? identifier,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            identifier,
          ],
        ),
        returnValue: _i5.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #call,
            [
              email,
              identifier,
            ],
          ),
        )),
      ) as _i5.Future<_i3.User>);

  @override
  _i5.Future<_i3.User> withToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #withToken,
          [token],
        ),
        returnValue: _i5.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #withToken,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.User>);
}

/// A class which mocks [SaveToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveToken extends _i1.Mock implements _i6.SaveToken {
  MockSaveToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TokenRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTokenRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TokenRepository);

  @override
  _i5.Future<void> call(String? token) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [token],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GetToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetToken extends _i1.Mock implements _i7.GetToken {
  MockGetToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TokenRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTokenRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TokenRepository);

  @override
  _i5.Future<String?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);
}
